// Code generated by dagger-compiler.  Do not edit.
package com.jakewharton.telecine;

import dagger.internal.Binding;
import dagger.internal.BindingsGroup;
import dagger.internal.Linker;
import dagger.internal.ModuleAdapter;
import dagger.internal.ProvidesBinding;
import java.util.Set;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class TelecineModule$$ModuleAdapter extends ModuleAdapter<TelecineModule> {
  private static final String[] INJECTS = { "members/com.jakewharton.telecine.TelecineActivity", "members/com.jakewharton.telecine.TelecineService", "members/com.jakewharton.telecine.TelecineShortcutConfigureActivity", "members/com.jakewharton.telecine.TelecineShortcutLaunchActivity", };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { };

  public TelecineModule$$ModuleAdapter() {
    super(com.jakewharton.telecine.TelecineModule.class, INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, true /*complete*/, false /*library*/);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(BindingsGroup bindings, TelecineModule module) {
    bindings.contributeProvidesBinding("@com.jakewharton.telecine.VideoSizePercentage()/com.jakewharton.telecine.IntPreference", new ProvideVideoSizePercentagePreferenceProvidesAdapter(module));
    bindings.contributeProvidesBinding("@com.jakewharton.telecine.VideoSizePercentage()/java.lang.Integer", new ProvideVideoSizePercentageProvidesAdapter(module));
    bindings.contributeProvidesBinding("@com.jakewharton.telecine.ShowCountdown()/java.lang.Boolean", new ProvideShowCountdownProvidesAdapter(module));
    bindings.contributeProvidesBinding("@com.jakewharton.telecine.HideFromRecents()/com.jakewharton.telecine.BooleanPreference", new ProvideHideFromRecentsPreferenceProvidesAdapter(module));
    bindings.contributeProvidesBinding("com.jakewharton.telecine.Analytics", new ProvideAnalyticsProvidesAdapter(module));
    bindings.contributeProvidesBinding("android.content.SharedPreferences", new ProvideSharedPreferencesProvidesAdapter(module));
    bindings.contributeProvidesBinding("@com.jakewharton.telecine.ShowCountdown()/com.jakewharton.telecine.BooleanPreference", new ProvideShowCountdownPreferenceProvidesAdapter(module));
  }

  /**
   * A {@code Binding<com.jakewharton.telecine.IntPreference>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code com.jakewharton.telecine.IntPreference} and its
   * dependencies.
   *
   * Being a {@code Provider<com.jakewharton.telecine.IntPreference>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideVideoSizePercentagePreferenceProvidesAdapter extends ProvidesBinding<IntPreference>
      implements Provider<IntPreference> {
    private final TelecineModule module;
    private Binding<android.content.SharedPreferences> prefs;

    public ProvideVideoSizePercentagePreferenceProvidesAdapter(TelecineModule module) {
      super("@com.jakewharton.telecine.VideoSizePercentage()/com.jakewharton.telecine.IntPreference", IS_SINGLETON, "com.jakewharton.telecine.TelecineModule", "provideVideoSizePercentagePreference");
      this.module = module;
      setLibrary(false);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      prefs = (Binding<android.content.SharedPreferences>) linker.requestBinding("android.content.SharedPreferences", TelecineModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(prefs);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.jakewharton.telecine.IntPreference>}.
     */
    @Override
    public IntPreference get() {
      return module.provideVideoSizePercentagePreference(prefs.get());
    }
  }

  /**
   * A {@code Binding<java.lang.Integer>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code java.lang.Integer} and its
   * dependencies.
   *
   * Being a {@code Provider<java.lang.Integer>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideVideoSizePercentageProvidesAdapter extends ProvidesBinding<Integer>
      implements Provider<Integer> {
    private final TelecineModule module;
    private Binding<IntPreference> pref;

    public ProvideVideoSizePercentageProvidesAdapter(TelecineModule module) {
      super("@com.jakewharton.telecine.VideoSizePercentage()/java.lang.Integer", NOT_SINGLETON, "com.jakewharton.telecine.TelecineModule", "provideVideoSizePercentage");
      this.module = module;
      setLibrary(false);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      pref = (Binding<IntPreference>) linker.requestBinding("@com.jakewharton.telecine.VideoSizePercentage()/com.jakewharton.telecine.IntPreference", TelecineModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(pref);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<java.lang.Integer>}.
     */
    @Override
    public Integer get() {
      return module.provideVideoSizePercentage(pref.get());
    }
  }

  /**
   * A {@code Binding<java.lang.Boolean>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code java.lang.Boolean} and its
   * dependencies.
   *
   * Being a {@code Provider<java.lang.Boolean>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideShowCountdownProvidesAdapter extends ProvidesBinding<Boolean>
      implements Provider<Boolean> {
    private final TelecineModule module;
    private Binding<BooleanPreference> pref;

    public ProvideShowCountdownProvidesAdapter(TelecineModule module) {
      super("@com.jakewharton.telecine.ShowCountdown()/java.lang.Boolean", NOT_SINGLETON, "com.jakewharton.telecine.TelecineModule", "provideShowCountdown");
      this.module = module;
      setLibrary(false);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      pref = (Binding<BooleanPreference>) linker.requestBinding("@com.jakewharton.telecine.ShowCountdown()/com.jakewharton.telecine.BooleanPreference", TelecineModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(pref);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<java.lang.Boolean>}.
     */
    @Override
    public Boolean get() {
      return module.provideShowCountdown(pref.get());
    }
  }

  /**
   * A {@code Binding<com.jakewharton.telecine.BooleanPreference>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code com.jakewharton.telecine.BooleanPreference} and its
   * dependencies.
   *
   * Being a {@code Provider<com.jakewharton.telecine.BooleanPreference>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideHideFromRecentsPreferenceProvidesAdapter extends ProvidesBinding<BooleanPreference>
      implements Provider<BooleanPreference> {
    private final TelecineModule module;
    private Binding<android.content.SharedPreferences> prefs;

    public ProvideHideFromRecentsPreferenceProvidesAdapter(TelecineModule module) {
      super("@com.jakewharton.telecine.HideFromRecents()/com.jakewharton.telecine.BooleanPreference", IS_SINGLETON, "com.jakewharton.telecine.TelecineModule", "provideHideFromRecentsPreference");
      this.module = module;
      setLibrary(false);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      prefs = (Binding<android.content.SharedPreferences>) linker.requestBinding("android.content.SharedPreferences", TelecineModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(prefs);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.jakewharton.telecine.BooleanPreference>}.
     */
    @Override
    public BooleanPreference get() {
      return module.provideHideFromRecentsPreference(prefs.get());
    }
  }

  /**
   * A {@code Binding<com.jakewharton.telecine.Analytics>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<com.jakewharton.telecine.Analytics>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideAnalyticsProvidesAdapter extends ProvidesBinding<Analytics>
      implements Provider<Analytics> {
    private final TelecineModule module;

    public ProvideAnalyticsProvidesAdapter(TelecineModule module) {
      super("com.jakewharton.telecine.Analytics", IS_SINGLETON, "com.jakewharton.telecine.TelecineModule", "provideAnalytics");
      this.module = module;
      setLibrary(false);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.jakewharton.telecine.Analytics>}.
     */
    @Override
    public Analytics get() {
      return module.provideAnalytics();
    }
  }

  /**
   * A {@code Binding<android.content.SharedPreferences>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<android.content.SharedPreferences>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideSharedPreferencesProvidesAdapter extends ProvidesBinding<android.content.SharedPreferences>
      implements Provider<android.content.SharedPreferences> {
    private final TelecineModule module;

    public ProvideSharedPreferencesProvidesAdapter(TelecineModule module) {
      super("android.content.SharedPreferences", IS_SINGLETON, "com.jakewharton.telecine.TelecineModule", "provideSharedPreferences");
      this.module = module;
      setLibrary(false);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<android.content.SharedPreferences>}.
     */
    @Override
    public android.content.SharedPreferences get() {
      return module.provideSharedPreferences();
    }
  }

  /**
   * A {@code Binding<com.jakewharton.telecine.BooleanPreference>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code com.jakewharton.telecine.BooleanPreference} and its
   * dependencies.
   *
   * Being a {@code Provider<com.jakewharton.telecine.BooleanPreference>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideShowCountdownPreferenceProvidesAdapter extends ProvidesBinding<BooleanPreference>
      implements Provider<BooleanPreference> {
    private final TelecineModule module;
    private Binding<android.content.SharedPreferences> prefs;

    public ProvideShowCountdownPreferenceProvidesAdapter(TelecineModule module) {
      super("@com.jakewharton.telecine.ShowCountdown()/com.jakewharton.telecine.BooleanPreference", IS_SINGLETON, "com.jakewharton.telecine.TelecineModule", "provideShowCountdownPreference");
      this.module = module;
      setLibrary(false);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      prefs = (Binding<android.content.SharedPreferences>) linker.requestBinding("android.content.SharedPreferences", TelecineModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(prefs);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.jakewharton.telecine.BooleanPreference>}.
     */
    @Override
    public BooleanPreference get() {
      return module.provideShowCountdownPreference(prefs.get());
    }
  }
}
